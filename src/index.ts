import {
  app,
  BrowserWindow,
  shell,
  session,
  ipcMain,
  Menu,
} from 'electron';
import services from './services';
import { AUTH_SERVICE } from './services/auth';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

function removeToggleDevToolsMenuItem(): void {
  const appMenu = Menu.getApplicationMenu();
  const viewMenu = appMenu.items.find(
    item => item.label === 'View'
  ).submenu;
  const toggleDevToolsItem = viewMenu.items.find(
    item => item.label === 'Toggle Developer Tools'
  );
  toggleDevToolsItem.visible = false;
}

function createWindow(): void {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  session.defaultSession.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          'Content-Security-Policy': ["img-src 'self' https:"],
        },
      });
    }
  );

  ipcMain.handle(
    'services',
    (event, api: keyof typeof services, params) => {
      return services[api](params);
    }
  );

  ipcMain.on('pat', (event, pat) => {
    AUTH_SERVICE.pat = pat;
  });

  removeToggleDevToolsMenuItem();

  createWindow();
});

app.on('web-contents-created', (event, contents) => {
  contents.setWindowOpenHandler(({ url }) => {
    setImmediate(() => {
      shell.openExternal(url);
    });
    return { action: 'deny' };
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
